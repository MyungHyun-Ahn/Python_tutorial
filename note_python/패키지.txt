모듈
코드를 작은 단위로 나눠서 저장해 놓은 파일

패키지
모듈을 모아둔 것

모듈과 패키지를 사용하면 구성 요소를 잘 정리할 수 있고 쉽게 재사용이 가능하다.

패키지를 만들 때에는
폴더를 만들고
파이썬 파일을 안으로 옮겨주고
__init__.py 파일을 만들어주면 된다.

__init__.py 파일이란?

>> 이 폴더는 파이썬 패키지 파일이다 라는 의미 >> 3.3 이전에는 __init__.py 파일이 없으면 임포트가 불가능 했음

initialize 의 줄임말 초기화 한다는 의미

__init__ 파일 안에서 임포트 하는 것은 패키지안으로 임포트 된다고 볼수있음.

ex) shapes 패키지안의 area 모듈을 init안에서 임포트
    >> 메인 파일에서 shapes.area.circle() 이런 방식으로 사용가능

import * : 모듈을 임포트할 때 * 을 사용하면 모듈의 모든 내용이 임포트됨
           모듈 대신 패키지에 *를 사용하면 아무것도 임포트되지 않음.
           ** 어떤 것이 임포트 되는지 모르기 때문에 네임스페이스를 완벽히 이해하고 있을때만 사용 권장**

__all__ 특수변수

__all__ 특수변수는 import *를 했을 때 임포트 대상에서 어떤 것을 가져와야 하는지 정해주는 변수임

__all__ = ['circle', 'square'] 을 써주고 area 모듈을 *로 임포트하면 circle 과 square 함수만 임포트됨

__init__ 파일 안에서 __all__ 특수 변수 안에 모듈을 넣어주고 해당 패키지를 *로 임포트하면 특수변수 안의 모듈이 임포트됨.

서브패키지

패키지 안의 패키지

임포트 방식 . 을 사용해서 임포트 
ex) import mymath.shapes.area / from mymath.shapes import area
as 를 사용해서 임포트하는 것의 이름을 바꿀 수 있음

상대 경로 임포트
. 으로 바꾸어 써서 임포트

외부패키지란?

좋은 개발자가 되려면 남의 코드를 잘써야함.

알맞은 외부패키지를 사용하면 프로그래밍 문제가 쉽게 해결됨.

외부패키지 사용법 

패키지에 어떤함수가 있는지 / 패키지의 함수들이 무엇을 하는지
>> 패키지의 공식 문서에 잘 정리돼 있음 / 구글링 통해서도 좋은 자료를 많이 찾을 수 있음

PyPI : 공식 패키지 저장소 (Py)thon (P)ackage (I)ndex

스탠다드 라이브러리 : 가장 기본적인 기능을 제공 / 파이썬을 설치하면 자동으로 딸려옴
외부 라이브러리 : 일반 개발자들이 패키지를 만들어 업로드한 것 / 직접 설치해야함






