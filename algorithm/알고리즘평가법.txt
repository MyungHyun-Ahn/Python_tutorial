평가의 두 기준

알고리즘 공부를 할 때 신경써야할 것

시간 >> 빨리 실행 >> 조금 더 중요

공간 >> 컴퓨터의 저장공간(메모리)

시간 복잡도 Time Complexity

n 이 별로 크지 않으면, 안 좋은 알고리즘을 써도 문제없음.

점근 표기법 (Big-O) : 가장 큰 항만 표기함
소요시간       점근 표기법 (Big-O)
20n + 40           O(n)
2n^2 + 2n + 157   O(n^2)

선형 탐색 : O(n) , 이진 탐색 : O(ln(n))

O(1) : 인풋의 크기가 소요 시간에 영향이 없다는 뜻 // 반복문이 없다면 대체로 O(1)

O(n) : 반복문이 있고 반복되는 횟수가 인풋의 크기와 비례하면 일반적으로 O(n)

O(n^2) : 반복문이 2개 있다면 O(n)

O(ln(n)) : 반복문의 변수가 2씩 증가하거나 감소하면 O(ln(n))

O(nln(n)) : O(n)과 O(ln(n))이 겹치면 O(nln(n))

코드 없이 알고리즘을 평가하는 팁

반복문의 도는 횟수를 파악

공간 복잡도 Space Complexity

O(1) : 변수

O(n) : list 가 n 일때 다른 리스트에 복사하면 O(n)

O(n) : list 가 2번 곱해지면 O(n^2)

유용한 파이썬 기능 정리

type() : 함수를 사용하면 파라미터의 데이터 타입이 리턴됨 시간복잡도는 O(1)

max(), min() : 최대값과 최소값을 리턴함 시간복잡도는 O(n)

str() : 숫자를 문자열로 바꿀 수 있음 str의 시간 복잡도는 O(log(n))

append insert del index reverse : O(n)

sort, sorted : O(nlogn)

slicing[a:b] : O(b-a)

len : O(1)

