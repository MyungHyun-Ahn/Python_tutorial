알고리즘이란? >> 문제를 해결하기위한 어떠한 방법

좋은 알고리즘? >> 문제를 해결하는 것, 더 잘 해결하는 것

다양한 방법들을 고민, 어떤 방법이 더 좋을지 분석하는 것이 알고리즘 공부.

탐색

저장된 정보들 중에서 원하는 값을 찾는 것
ex) 책장에서 책을 찾거나 리스트에서 숫자를 찾는것

선형 탐색 linear search algorithm

한개씩 차례로 쭉 보면서 탐색하는 알고리즘
최악의 경우 값을 전부 봐야함.
리스트의 크기가 커질수록 탐색해야하는 수가 더 커짐.

이진 탐색 binary search algorithm

정렬을 한 뒤 절반씩 자르면서 탐색하는 알고리즘
최악의 경우에도 반으로 자르면서 보기 때문에 전부 보지 않아도 됨.
리스트의 크기가 커져도 탐색해야하는 수가 천천히 늘어남. >> 선형 탐색보다 효율적, 정렬되지 않은 리스트에서는 사용 불가

정렬 Sorting

리스트의 원소들을 특정 순서로 정리하는 것
정렬을 알고리즘의 기초임.
모든 개발자가 알아야할 가장 기본적인 알고리즘

선택 정렬 Selection Sort

첫번째 인덱스부터 한칸씩 뒤로가면서 가장 작은 값을 선택하여 정렬하는 알고리즘이다.

1번 인덱스의 값을 찾고 > 2번 인덱스의 값을 찾고 > 3번 인덱스의 값을 찾고 > ... 반복하여 끝자리까지 값을 찾는다.

삽입 정렬 Insertion Sort

두번째 값부터 시작하여 앞의 값들과 비교하여 삽입할 위치를 지정한 후 값을 뒤로 옮겨가며 지정한 자리에 값을 삽입하며 정렬하는 알고리즘이다.

Brute Force : 무차별적으로 가능한 모든 방법을 시도.

Divide and Conquer : 분할 정복 > 재귀 개념에 대한 이해 > 가장 고난이도 일수도 있음

문제 > 부분 문제 분할 

1. Divide : 문제를 부분 문제로 나눈다.
                                     - Divide
2. Conquer : 각 부분 문제를 정복한다. - Conquer
                                     - Combine
3. Combine : 부분 문제들의 솔루션을 합쳐서 기존 문제를 해결한다.

계속 분할 할수도 있음

1~100 까지 더하는 문제 - 1~50까지 더하는 문제  1275   5050
                        51~100까지 더하는 문제  3775

합병 정렬 Merge Sort

Divide : 리스트를 반으로 나눈다.
Conquer : 완쪽 리스트와 오른쪽 리스트를 각각 정렬한다.
Combine : 정렬된 두 리스트를 하나의 정렬된 리스트로 합병한다.

각각 비교하여 더 작은 인덱스로 배열


퀵 정렬 Quicksort
Divide 에서 대부분 일
리스트를 나누는 과정을 Partition
pivot을 정하고 pivot을 기준으로 정렬함

왼쪽 오른쪽을 나누어서 정렬

퀵정렬에서 가장 어려운 부분 Partition

def partition(my_list, start, end)

p = end