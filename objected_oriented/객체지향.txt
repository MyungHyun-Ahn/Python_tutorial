객체 : 속성과 행동으로 이루어짐
> 우리가 살아가면서 보는 모든 존재
> 현실에 존재하든, 가상으로 존재하든 속성과 행동을 떠올릴 수 있다면 모두 객체이다.

객체 지향 프로그래밍 : 프로그램을 여러 개의 독립된 객체들과 그 객체들 간의 상호작용으로 파악하는 프로그래밍 접근법이다.
> 프로그램을 객체들과 객체들의 소통으로 바라보는 것

객체지향적으로 설계 > 모델링(modeling)

객체지향 프로그래밍으로 프로그램을 만들려면
프로그램에 어떤 객체들이 필요할지 정한다.
객체들의 속성과 행동을 정한다.
객체들이 어떻게 소통할지 정한다.

클래스와 인스턴스
객체의 틀 : 클래스
틀로 만든 결과물 : 객체
클래스로 객체를 만든다 = 클래스로 인스턴스를 만든다
객체 = 인스턴스 : 완전히 같지는 않지만 비슷한 의미

속성 > 변수로 행동 > 함수(메소드)로 나타냄.

메소드의 종류
인스턴스 메소스 : 인스턴스 변수를 사용하거나 인스턴스 변수에 값을 설정하는 메소드
> 규칙 1 : 인스턴스의 메소드를 호출하면 파라미터로 인스턴스가 자동으로 전달
> 규칙 2 : 첫번째 파라미터로 들어오는 인스턴스를 self로 쓰기를 권장

클래스 변수 : 같은 클래스 안의 인스턴스끼리 공유하는 변수
같은 이름의 클래스 변수 VS 같은 이름의 인스턴스 변수 : 같은 이름의 인스턴스 변수가 읽어짐

데코레이터(decorator) > 함수를 꾸며줌 @ 기호로 불러옴

클래스 메소드

인스턴스 변수 사용 > 인스턴스 메소드
클래스 메소드 사용 > 클래스 메소드

둘 다 쓴다면 > 인스턴스 메소드

인스턴스 없이도 필요한 정보가 있다면
클래스 메소드 User.count > 인스턴스가 없더라도 필요

인스턴스 변수나 클래스 변수 중 아무것도 사용하지 않을 때 > 정적 메소드 사용

파이썬으로 객체 지향 프로그래밍을 배우는 이유

파이썬이 순수 객체 지향 언어 > 파이썬의 모든 것이 객체
지금까지 써왔던 모든 것들이 어떤 객체의 인스턴스임

가변 타입 객체 : 한번 생성한 인스턴스의 속성 변경 가능 ex) list
불변 타입 객체 : 한번 생성한 인스턴스의 속성 변경 불가 ex) tuple

어떤 타입이냐에 따라 같은 상황에서도 다른 결과!

직접 작성하는 클래스는 가변 타입 > 인스턴스 변경 시 원래 인스턴스 속성을 바꾸면 됨!

