branch 브랜치

하나의 코드 관리 흐름 > 나뭇가지

맨 처음 커밋 > 루트 커밋
가지 하나 하나 > 브랜치

On branch main : 메인 브랜치 위에 있다는 의미 > 레포지트리를 만들면 자동으로 생성되는 브랜치

git branch [만들 브랜치 이름] : 브랜치 생성

git checkout [브랜치 이름] : 해당 브랜치로 이동

브랜치를 만들고 그 브랜치로 바로 이동하는 방법

git checkout -b [만들 브랜치 이름] : 브랜치를 만들고 바로 이동

git branch -d [삭제할 브랜치 이름] : 브랜치를 삭제

git merge [합칠 브랜치 이름] : 해당 브랜치에 적은 브랜치의 내용을 합친다.

conflict >> 충돌 

충돌된 부분을 다시 쓰고 커밋

conflict 해결방법

1. 컨플릭트가 발생한 파일을 연다.
2. 머지의 결과가 되었으면 하는 모습대로 코드를 수정한다.
3. 커밋한다.

conflict 해결 2 // merge 자체를 취소 

git merge --abort : 머지를 취소한다.

여러개의 파일에서 conflict가 발생하면

파일 하나씩 conflict를 해결하고 하나씩 커밋하거나
모든 파일의 conflict를 해결하고 한번에 커밋하면 된다.

main 브랜치와 다른 브랜치 동시에 push하기

로컬 레포지토리에서 리모트 레보지토리로 처음 푸시할때는
--set--upstream 옵션을 써줘야함

브랜치는 커밋을 가리키는 존재(포인터)
HEAD는 브랜치를 통해 커밋을 간접적으로 가리키는 존재(포인터)

git reset의 동작 원리

git reset 커맨드를 사용하면

HEAD는 여전히 같은 브랜치를 가리키고
HEAD가 가리키는 브랜치가 다른 특정 커밋을 가리키게 됨.
이 때문에 결국 HEAD가 간접적으로 가리키던 커밋도 바뀌게 됨.

git reset을 한다고 그 이후의 커밋들이 삭제되는 것이 아님

git reset으로 커밋 사이를 자유자재로 이동이 가능함.

git reset

HEAD가 가리키던 브랜치가 다른 커밋을 가리키도록 한다.
HEAD도 결국 간접적으로 다른 커밋을 가리키게되는 효과가 생긴다.

git checkout

HEAD 자체가 다른 커밋이나 브랜치를 가리키도록 한다.
브랜치를 통하지 않고, 커밋을 직접적으로 가리키는 HEAD를 Detached HEAD라고 한다.