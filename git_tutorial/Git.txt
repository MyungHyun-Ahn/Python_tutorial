Git의 3가지 작업 영역

1. working directory 
>> working tree 라고도 함
작업을 하는 프로젝트 디렉토리

2. staging area
>> index 라고도 함
git add를 한 파일들이 존재하는 영역
커밋을 하게되면 staging area에 있는 파일들만 커밋에 반영됨

3. repository
working directory의 변경 이력들이 저장되어 있는 영역
즉, 커밋들이 저장되는 영역

working directory > staging area > repository

Git이 보는 파일의 4가지 상태

Git에서 파일은 매 순간 4가지 상태 중 하나의 상태에 있게됨.

● Untracked 상태
추적되지 않고 있는 상태 >> 변동사항이 전혀 추적되고 있지 않는 상태
ex) 파일을 생성하고 그 파일을 한번도 git add 해주지 않았다면 이 상태임.

● Tracked 상태
변동사항이 추적되고 있는 상태. 특성에 따라 3가지로 나뉨

    ● Staged 상태
    파일의 내용이 수정된 뒤 staging area에 올라와 있는 상태
    ex1 : 새로 생성한 파일에 내용을 쓰고 git add를 한 상태
    ex2 : 한번이라도 커밋에 포함됐었던 파일이라도 내용을 수정하고 git add를 해주면 이 상태

    ● Unmodified 상태
    파일이 최신 커밋의 모습과 비교했을 때 전혀 바뀐게 없는 상태
    커밋 직후 working directory 안의 모든 파일들이 이 상태임

    ● Modified 상태
    최신 커밋과 비교했을 때 조금이라도 바뀐 내용이 있는 상태


staging area에 파일 추가 >> git add

staging area에서 파일 삭제 >> git reset

리모트 레포지토리 / 원격 레포지토리 : 깃허브에서 만든 레포지토리

로컬 레포지토리 : 내 컴퓨터의 레포지토리

로컬 레포지토리를 만들고 커밋을 한 후 깃허브에 업로드 하기

git init
git add README.md
git commit -m "first commit"
git remote add origin 깃허브 레포지토리 링크
git push -u origin master

이미 만든 로컬 레포지토리를 깃허브에 업로드 하기

git remote add origin 깃허브 레포지토리 링크
git push -u origin master

깃 허브는 파일 이름이 README.md 일 경우 리모트 레포지토리에서 바로 보여줌

로컬 레포지토리 >> 리모트 레포지토리 : 푸시 push

git add 파일 경로
>>
git commit -m "commit message"
>>
git push

-m 옵션을 붙이지 않고 커밋하기

git add . 후
git commit 을 쓴뒤

맨위에 메세지를 적고
esc 후 :wq 를 적으면 자동으로 커밋이 되면서 커밋 메세지가 저장됨

git commit 만으로 커밋을 남기면 복잡하고 긴 커밋 메세지를 남길수 있다.

커밋 메세지를 수정하기

최신 커밋을 수정하는 기능

git add .
git commit --amend  : 커밋 메세지를 수정 가능 파일 바꾸기도 가능


리모트 레포지토리 >> 로컬 레포지토리 : 풀 pull

git pull

리모트 레포지토리 사용 이유

1. 안전성
2. 협업 가능

cd..
git clone 깃허브링크 : 복사하다

기본적으로 자신의 리모트 레포지토리에는 원래 자신만이 push 가능함.
하지만 리모트 레포지토리의 주인이 다른 사용자를 collaborator로 설정해주면 그 사용자도 push가 가능함.

git의 커밋을 다루는 방법

커밋 히스토리 : 지금까지 한 커밋의 목록

git log : 커밋 히스토리를 볼수 있음

commit a2e32bf3530f79799def28d153f55fdca6d5e410 >> 커밋 아이디 / 커밋 해시
Author: Myunghyun_Ahn <ahn020367@gmail.com>
Date:   Tue Mar 22 15:13:22 2022 +0900

커밋 히스토리 깔끔하게 보기

git log --pretty=oneline : 커밋해시 커밋메세지를 한줄로 보여줌.

git show 커밋해시 4자리 : 바로 이전의 커밋과의 차이점을 보여줌.


git alias

긴 커맨드를 축약해서 사용가능함

git log --pretty=oneline 은 너무 길어서 치기 힘들기 때문에
git config alias.history 'log --pretty=oneline' 를 한번 실행시켜주면
git history 로 줄여 사용할 수 있음

커밋의 차이점 비교하기

git diff 커밋해시1 커밋해시2

HEAD의 의미 : 보통 가장 최근에 한 커밋을 가리킴

이전 커밋으로 가기

git reset --hard 커밋해시 4자리  : HEAD가 과거의 커밋을 가리키게 할 수 있음. 즉, 특정 시점으로 돌아감
--hard 를 사용했기 때문에 working directory의 내부도 과거 커밋의 모습처럼 바뀜.

git reset 옵션 eea5 | working directory | staging area     | repository 
    --soft          |     안 바뀜       |    안 바뀜        | HEAD가 eea5 커밋 가리킴
    --mixed         |     안 바뀜       | eea5 커밋처럼 바뀜 | HEAD가 eea5 커밋 가리킴
    --hard          | eea5 커밋처럼 바뀜 | eea5 커밋처럼 바뀜 | HEAD가 eea5 커밋 가리킴

hard 는 완전히 다 지워버리기 때문에 권장 X

git log --pretty=oneline 했을때 위에서부터
번호가 5 4 3 2 1 매겨짐

git reset --hard HEAD~x 현재 HEAD가 가리키는 커밋보다 x단계 전에 있는 커밋을 나타냄

커밋에 태그 달기 tag

git tag [태그 이름] [커밋 해시] : 태그 달기

git tag 태그 조회

git show [태그 이름] : 태그가 달린 커밋 조회

git tag -d [지울 태그명] : 태그 삭제



