트리
데이터의 상-하 관계를 저장하는 자료구조 - 계층적 구조
계층적 구조를 갖는 예 : 컴퓨터의 폴더 구조, 클래스의 상속 관계 등

배열, 링크드 리스트 - 선형적 자료구조
해시 테이블 - 데이터 관계 저장 X
트리 - 계층적 구조!

트리도 노드로 구현
 - 트리의 노드는 하위 노드의 레퍼런스를 가짐
 - 하위 노드들을 자식 노드라고 함 : 부모 - 자식 관계
 - 트리에서는 가장 상위의 노드를 특별히 관리 - root 노드 - 트리의 시작점이므로 중요!

트리 용어
 - root 노드(뿌리 노드) : 트리의 시작 노드
 - 부모 노드 : 특정 노드의 직속 상위 노드
 - 자식 노드 : 특정 노드의 직속 하위 노드
 - 형제 노드 : 같은 부모를 갖는 노드
 - leaf 노드 : 자식 노드를 가지고 있지 않은 노드
 - 깊이 : 특정 노드가 root 노드에서 떨어져 있는 거리
 - 레벨 : 깊이 + 1
 - 부분 트리 (sub-tree) : 현재 트리의 일부분을 이루고 있는 더 작은 트리

트리의 활용
 -컴퓨터 과학의 다양한 문제들을 기발하게 해결!
  * 정렬
  * 압축
 - 흔히 사용하는 여러 추상 자료형 구현
 - 계층적 관계가 있는 데이터를 컴퓨터에서 사용!

이진 트리
 - 각 노드가 최대 2개의 자식 노드를 갖고 있을 수 있는 트리
 - 모든 노드가 0개 1개 혹은 2개의 자식 노드만 가짐


정 이진 트리 (Full Binary Tree)
 - 모든 노드가 2개 또는 0개의 자식을 갖는 트리

완전 이진 트리 (Complete Binary Tree)
 - 마지막 레벨 직전의 레벨까지는 모든 노드들이 다 채워진 트리
 - 마지막 레벨에서는 노드들이 다 채워질 필요는 없더라도, 왼쪽부터 오른쪽 방향으로 노드들이 다채워져야함.
 - 완전 이진 트리의 높이는 ln(n)에 비례함 n은 노드의 개수

포화 이진 트리 (Perfect Binary Tree)
 - 모든 레벨이 빠짐없이 다 노드로 채워져있는 이진트리
 - 트리의 높이를 h, 노드 수를 n이라 하면 높이와 노드 수의 관계는
    * n = 2^(h+1)

완전 이진트리 배열로 구성하기
complete_binary_tree = [None, 1, 5, 12, 11, 9, 10, 14, 2, 10]
 - 0번 인덱스를 0으로 두고 1번 인덱스부터 root노드를 시작으로 
 - 깊이가 1인 노드들을 왼쪽에서 오른쪽 방향 순으로
 - 깊이가 2인 노드들을 왼쪽에서 오른쪽 방향 순으로
 - ...  배열에 넣어준다.
 
 - 자식 노드를 찾는 방법 본인의 인덱스에서 2를 곱한 값부터 2*n, 2*n+1이 자식노드이다.
 - 부모 노드를 찾는 방법 본인의 인덱스에서 2를 나누고, 정수 부분만 가져오면 된다.


트리의 순회
 - 자료구조에 저장된 모든 데이터를 도는 것
 - 데이터를 어떤 순서로 출력할 수 있을까? < 재귀 사용!
 
 - 순회 기본 동작들
     * 재귀적으로 왼쪽 부분 트리 순회
     * 재귀적으로 오른쪽 부분 트리 순회
     * 현재 노드 데이터를 출력
      > 3가지 동작을 어떤 순서로 조합하냐에 따라서 순회가 조금씩 달라진다!
 def traverse(node): 
    ...
     traverse(node.right_child)
    ...

- 트리
       F
     /   \
    B     G  
  /   \     \ 
 A     D     I
      /  \   /
     C    E H
pre-order 순회 / 전위 순회
 - 순회 기본 동작들
     * 현재 노드 데이터를 출력한다.
     * 재귀적으로 왼쪽 부분 트리 순회
     * 재귀적으로 오른쪽 부분 트리 순회
> 출력 : F, B, A, D, C, E, G, I, H

post-order 순회 / 후위 순회
 - 순회 기본 동작들
     * 재귀적으로 왼쪽 부분 트리 순회
     * 재귀적으로 오른쪽 부분 트리 순회
     * 현재 노드 데이터를 출력한다.
> 출력 : A, C, E, D, B, H, I, G, F

in-order 순회 / 중위 순회
 - 순회 기본 동작들
     * 재귀적으로 왼쪽 부분 트리 순회
     * 현재 노드 데이터를 출력한다.
     * 재귀적으로 오른쪽 부분 트리 순회
> 출력 : A, B, C, D, E, F, G, H, I

- 트리의 순회 방식에 따라 선형 관계를 만들고 이용 가능


