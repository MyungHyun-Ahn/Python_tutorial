이진 탐색 트리
 - 이진 트리로 구성됨
 - 왼쪽 자식은 자신보다 더 작은 노드들로 구성
 - 오른쪽 자식은 자신보다 더 큰 노드들로 구성

이진 탐색 트리 구현
 - 배열이나 파이썬 리스트로 구현하지 않는다!
 - 노드로 구현
 - 이진 탐색 트리는 양방향성을 가짐
 - 부모와 자식의 레퍼런스를 모두 저장

이진 탐색 트리를 in-order(전위 순회)로 출력하면 정렬되어 출력된다.

이진 탐색 트리 삽입 - 트리의 높이: h
삽입 이후에도 이진 탐색 트리 속성이 유지 되어야함.
 - 새로운 노드 생성: O(1)
 - root 노드부터 비교하면서 저장할 위치 찾음: 최악의 경우 O(h)
 - 찾은 위치에 새롭게 만든 노드 연결: O(1)
> 삽입 시간 복잡도 O(h)

이진 탐색 트리 탐색 - 트리의 높이: h
 - 특정 데이터를 갖는 노드를 리턴하는 연산
 - 주어진 노드의 데이터와 탐색하려는 데이터 비교
 - 탐색하려는 데이터가 더 크면 노드의 오른쪽 자식으로 간다.
 - 탐색하려는 데이터가 더 작으면 노드의 왼쪽 자식으로 간다.
 - 탐색하려는 노드를 찾으면 리턴한다. : 최악의 경우 O(h)
> 탐색 시간 복잡도 O(h)

이진 탐색 트리 삭제
 - 삭제하려는 데이터를 갖는 노드를 먼저 찾아야함

 - 경우 1: 삭제하려는 데이터가 leaf 노드의 데이터일 때
    * 삭제하려는 부모 노드와의 연결을 끊어준다.
 - 경우 2: 삭제하려는 노드가 하나의 자식 노드만 있을 때
    * 자식노드가 부모의 자리를 차지한다.
 - 경우 3: 삭제하려는 노드가 두 개의 자식이 있을 때
    * 어떤 노드보다 큰 모든 노드 중 가장 작은 노드를 successor이라 함
    * 지우려는 노드의 데이터와 successor의 데이터만 바꾸어주고
    * successor 노드를 삭제하면 됨
> 시간 복잡도 O(h) (평균적 O(lg(n)) 최악 O(n))


이진 탐색 트리와 해시 테이블 비교

                    이진 탐색 트리	             해시 테이블 
 삽입 |	O(h) (평균적 O(lg(n)), 최악 O(n)) |	평균적 O(1), 최악 O(n)
 탐색 |	O(h) (평균적 O(lg(n)), 최악 O(n)) |	평균적 O(1), 최악 O(n)
 삭제 |	O(h) (평균적 O(lg(n)), 최악 O(n)) |	평균적 O(1), 최악 O(n)
